// Code generated by sysl DO NOT EDIT.
package dbfront

import (
	"database/sql"
	"net/http"

	"github.com/anz-bank/sysl-go/common"
	"github.com/anz-bank/sysl-go/core"
	"github.com/anz-bank/sysl-go/database"
	"github.com/anz-bank/sysl-go/restlib"
	"github.com/anz-bank/sysl-go/validator"
)

// Handler interface for dbfront
type Handler interface {
	GetEndpointHandler(w http.ResponseWriter, r *http.Request)
	PostEndpointWithArgHandler(w http.ResponseWriter, r *http.Request)
}

// ServiceHandler for dbfront API
type ServiceHandler struct {
	genCallback      core.RestGenCallback
	serviceInterface *ServiceInterface
	DB               *sql.DB
}

// NewServiceHandler for dbfront
func NewServiceHandler(genCallback core.RestGenCallback, serviceInterface *ServiceInterface) *ServiceHandler {
	db, err := database.GetDBHandle()
	if err != nil {
		return nil
	}

	return &ServiceHandler{genCallback, serviceInterface, db}
}

// GetEndpointHandler ...
func (s *ServiceHandler) GetEndpointHandler(w http.ResponseWriter, r *http.Request) {
	if s.serviceInterface.GetEndpoint == nil {
		common.HandleError(r.Context(), w, common.InternalError, "not implemented", nil, s.genCallback.MapError)
		return
	}

	ctx := common.RequestHeaderToContext(r.Context(), r.Header)
	ctx = common.RespHeaderAndStatusToContext(ctx, make(http.Header), http.StatusOK)
	var req GetEndpointRequest

	req.ID = restlib.GetURLParam(r, "id")
	ctx, cancel := s.genCallback.DownstreamTimeoutContext(ctx)
	defer cancel()
	valErr := validator.Validate(&req)
	if valErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", valErr, s.genCallback.MapError)
		return
	}

	conn, err := s.DB.Conn(ctx)
	if err != nil {
		common.HandleError(ctx, w, common.InternalError, "Database connection could not be retrieved", err, s.genCallback.MapError)
		return
	}

	defer conn.Close()
	tx, err := conn.BeginTx(ctx, &sql.TxOptions{Isolation: sql.LevelSerializable})
	if err != nil {
		common.HandleError(ctx, w, common.DownstreamUnavailableError, "DB Transaction could not be created", err, s.genCallback.MapError)
		return
	}

	client := GetEndpointClient{
		conn: conn,
	}

	statusmsg, err := s.serviceInterface.GetEndpoint(ctx, &req, client)
	if err != nil {
		tx.Rollback()
		common.HandleError(ctx, w, common.DownstreamUnexpectedResponseError, "Downstream failure", err, s.genCallback.MapError)
		return
	}

	commitErr := tx.Commit()
	if commitErr != nil {
		common.HandleError(ctx, w, common.InternalError, "Failed to commit the transaction", commitErr, s.genCallback.MapError)
		return
	}

	headermap, httpstatus := common.RespHeaderAndStatusFromContext(ctx)
	restlib.SetHeaders(w, headermap)
	restlib.SendHTTPResponse(w, httpstatus, statusmsg)
}

// PostEndpointWithArgHandler ...
func (s *ServiceHandler) PostEndpointWithArgHandler(w http.ResponseWriter, r *http.Request) {
	if s.serviceInterface.PostEndpointWithArg == nil {
		common.HandleError(r.Context(), w, common.InternalError, "not implemented", nil, s.genCallback.MapError)
		return
	}

	ctx := common.RequestHeaderToContext(r.Context(), r.Header)
	ctx = common.RespHeaderAndStatusToContext(ctx, make(http.Header), http.StatusOK)
	var req PostEndpointWithArgRequest

	req.ID = restlib.GetURLParam(r, "id")
	ctx, cancel := s.genCallback.DownstreamTimeoutContext(ctx)
	defer cancel()
	valErr := validator.Validate(&req)
	if valErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", valErr, s.genCallback.MapError)
		return
	}

	conn, err := s.DB.Conn(ctx)
	if err != nil {
		common.HandleError(ctx, w, common.InternalError, "Database connection could not be retrieved", err, s.genCallback.MapError)
		return
	}

	defer conn.Close()
	tx, err := conn.BeginTx(ctx, &sql.TxOptions{Isolation: sql.LevelSerializable})
	if err != nil {
		common.HandleError(ctx, w, common.DownstreamUnavailableError, "DB Transaction could not be created", err, s.genCallback.MapError)
		return
	}

	client := PostEndpointWithArgClient{
		conn: conn,
	}

	statusmsg, err := s.serviceInterface.PostEndpointWithArg(ctx, &req, client)
	if err != nil {
		tx.Rollback()
		common.HandleError(ctx, w, common.DownstreamUnexpectedResponseError, "Downstream failure", err, s.genCallback.MapError)
		return
	}

	commitErr := tx.Commit()
	if commitErr != nil {
		common.HandleError(ctx, w, common.InternalError, "Failed to commit the transaction", commitErr, s.genCallback.MapError)
		return
	}

	headermap, httpstatus := common.RespHeaderAndStatusFromContext(ctx)
	restlib.SetHeaders(w, headermap)
	restlib.SendHTTPResponse(w, httpstatus, statusmsg)
}
